// <auto-generated />
using System;
using LMSRepository.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LMSRepository.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210818212934_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("LMSEntities.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Zipcode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("LMSEntities.Models.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "4063f725-61c2-4173-bba6-bde93bdfd108",
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "25c2925b-749b-4716-9367-5c908707354a",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "1c4c33ed-86cc-49db-8c94-49372f65a1f4",
                            Name = "Librarian",
                            NormalizedName = "LIBRARIAN"
                        });
                });

            modelBuilder.Entity("LMSEntities.Models.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.Property<bool>("IsAccountActivated")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("LMSEntities.Models.AppUserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("LMSEntities.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("LMSEntities.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("LMSEntities.Models.Checkout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CheckoutDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateReturned")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("LibraryAssetId")
                        .HasColumnType("int");

                    b.Property<int>("LibraryCardId")
                        .HasColumnType("int");

                    b.Property<byte>("RenewalCount")
                        .HasMaxLength(3)
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("LibraryAssetId");

                    b.HasIndex("LibraryCardId");

                    b.ToTable("Checkouts");
                });

            modelBuilder.Entity("LMSEntities.Models.CheckoutHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("CheckedIn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CheckedOut")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LibraryAssetId")
                        .HasColumnType("int");

                    b.Property<int?>("LibraryCardId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LibraryAssetId");

                    b.HasIndex("LibraryCardId");

                    b.ToTable("CheckoutHistory");
                });

            modelBuilder.Entity("LMSEntities.Models.Hold", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("HoldPlaced")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LibraryAssetId")
                        .HasColumnType("int");

                    b.Property<int?>("LibraryCardId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LibraryAssetId");

                    b.HasIndex("LibraryCardId");

                    b.ToTable("Holds");
                });

            modelBuilder.Entity("LMSEntities.Models.LibraryAsset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Added")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("AssetType")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<int>("CopiesAvailable")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("DeweyIndex")
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("ISBN")
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.Property<int>("NumberOfCopies")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Year")
                        .HasMaxLength(4)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ISBN")
                        .IsUnique();

                    b.ToTable("LibraryAssets");
                });

            modelBuilder.Entity("LMSEntities.Models.LibraryAssetAuthor", b =>
                {
                    b.Property<int>("LibrayAssetId")
                        .HasColumnType("int");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<byte>("Order")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("LibrayAssetId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("LibraryAssetAuthors");
                });

            modelBuilder.Entity("LMSEntities.Models.LibraryAssetCategory", b =>
                {
                    b.Property<int>("LibrayAssetId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("LibrayAssetId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("LibraryAssetCategory");
                });

            modelBuilder.Entity("LMSEntities.Models.LibraryCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("Fees")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("CardNumber")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("MemberId")
                        .IsUnique();

                    b.ToTable("LibraryCards");
                });

            modelBuilder.Entity("LMSEntities.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PublicId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Photos");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Photo");
                });

            modelBuilder.Entity("LMSEntities.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Invalidated")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RequestIp")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Used")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("LMSEntities.Models.ReserveAsset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCheckedOut")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsCheckedOut")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LibraryAssetId")
                        .HasColumnType("int");

                    b.Property<int>("LibraryCardId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Reserved")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Until")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("LibraryAssetId");

                    b.HasIndex("LibraryCardId");

                    b.ToTable("ReserveAssets");
                });

            modelBuilder.Entity("LMSEntities.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Abbreviations")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.HasKey("Id");

                    b.ToTable("State");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Abbreviations = "AL",
                            Name = "Alabama"
                        },
                        new
                        {
                            Id = 2,
                            Abbreviations = "AK",
                            Name = "Alaska"
                        },
                        new
                        {
                            Id = 3,
                            Abbreviations = "AR",
                            Name = "Arkansas"
                        },
                        new
                        {
                            Id = 4,
                            Abbreviations = "AZ",
                            Name = "Arizona"
                        },
                        new
                        {
                            Id = 5,
                            Abbreviations = "CA",
                            Name = "California"
                        },
                        new
                        {
                            Id = 6,
                            Abbreviations = "CO",
                            Name = "Colorado"
                        },
                        new
                        {
                            Id = 7,
                            Abbreviations = "CT",
                            Name = "Connecticut"
                        },
                        new
                        {
                            Id = 8,
                            Abbreviations = "DC",
                            Name = "District of Columbia"
                        },
                        new
                        {
                            Id = 9,
                            Abbreviations = "DE",
                            Name = "Delaware"
                        },
                        new
                        {
                            Id = 10,
                            Abbreviations = "FL",
                            Name = "Florida"
                        },
                        new
                        {
                            Id = 11,
                            Abbreviations = "GA",
                            Name = "Georgia"
                        },
                        new
                        {
                            Id = 12,
                            Abbreviations = "HI",
                            Name = "Hawaii"
                        },
                        new
                        {
                            Id = 13,
                            Abbreviations = "ID",
                            Name = "Idaho"
                        },
                        new
                        {
                            Id = 14,
                            Abbreviations = "IL",
                            Name = "Illinois"
                        },
                        new
                        {
                            Id = 15,
                            Abbreviations = "IN",
                            Name = "Indiana"
                        },
                        new
                        {
                            Id = 16,
                            Abbreviations = "IA",
                            Name = "Iowa"
                        },
                        new
                        {
                            Id = 17,
                            Abbreviations = "KS",
                            Name = "Kansas"
                        },
                        new
                        {
                            Id = 18,
                            Abbreviations = "KY",
                            Name = "Kentucky"
                        },
                        new
                        {
                            Id = 19,
                            Abbreviations = "LA",
                            Name = "Louisiana"
                        },
                        new
                        {
                            Id = 20,
                            Abbreviations = "ME",
                            Name = "Maine"
                        },
                        new
                        {
                            Id = 21,
                            Abbreviations = "MD",
                            Name = "Maryland"
                        },
                        new
                        {
                            Id = 22,
                            Abbreviations = "MA",
                            Name = "Massachusetts"
                        },
                        new
                        {
                            Id = 23,
                            Abbreviations = "MI",
                            Name = "Michigan"
                        },
                        new
                        {
                            Id = 24,
                            Abbreviations = "MN",
                            Name = "Minnesota"
                        },
                        new
                        {
                            Id = 25,
                            Abbreviations = "MS",
                            Name = "Mississippi"
                        },
                        new
                        {
                            Id = 26,
                            Abbreviations = "MO",
                            Name = "Missouri"
                        },
                        new
                        {
                            Id = 27,
                            Abbreviations = "MT",
                            Name = "Montana"
                        },
                        new
                        {
                            Id = 28,
                            Abbreviations = "NE",
                            Name = "Nebraska"
                        },
                        new
                        {
                            Id = 29,
                            Abbreviations = "NH",
                            Name = "New Hampshire"
                        },
                        new
                        {
                            Id = 30,
                            Abbreviations = "NJ",
                            Name = "New Jersey"
                        },
                        new
                        {
                            Id = 31,
                            Abbreviations = "NM",
                            Name = "New Mexico"
                        },
                        new
                        {
                            Id = 32,
                            Abbreviations = "NY",
                            Name = "New York"
                        },
                        new
                        {
                            Id = 33,
                            Abbreviations = "NC",
                            Name = "North Carolina"
                        },
                        new
                        {
                            Id = 34,
                            Abbreviations = "NV",
                            Name = "Nevada"
                        },
                        new
                        {
                            Id = 35,
                            Abbreviations = "ND",
                            Name = "North Dakota"
                        },
                        new
                        {
                            Id = 36,
                            Abbreviations = "OH",
                            Name = "Ohio"
                        },
                        new
                        {
                            Id = 37,
                            Abbreviations = "OK",
                            Name = "Oklahoma"
                        },
                        new
                        {
                            Id = 38,
                            Abbreviations = "OR",
                            Name = "Oregon"
                        },
                        new
                        {
                            Id = 39,
                            Abbreviations = "PA",
                            Name = "Pennsylvania"
                        },
                        new
                        {
                            Id = 40,
                            Abbreviations = "RI",
                            Name = "Rhode Island"
                        },
                        new
                        {
                            Id = 41,
                            Abbreviations = "SC",
                            Name = "South Carolina"
                        },
                        new
                        {
                            Id = 42,
                            Abbreviations = "SD",
                            Name = "South Dakota"
                        },
                        new
                        {
                            Id = 43,
                            Abbreviations = "TN",
                            Name = "Tennessee"
                        },
                        new
                        {
                            Id = 44,
                            Abbreviations = "TX",
                            Name = "Texas"
                        },
                        new
                        {
                            Id = 45,
                            Abbreviations = "UT",
                            Name = "Utah"
                        },
                        new
                        {
                            Id = 46,
                            Abbreviations = "VT",
                            Name = "Vermont"
                        },
                        new
                        {
                            Id = 47,
                            Abbreviations = "VA",
                            Name = "Virginia"
                        },
                        new
                        {
                            Id = 48,
                            Abbreviations = "WA",
                            Name = "Washington"
                        },
                        new
                        {
                            Id = 49,
                            Abbreviations = "WV",
                            Name = "West Virginia"
                        },
                        new
                        {
                            Id = 50,
                            Abbreviations = "WI",
                            Name = "Wisconsin"
                        },
                        new
                        {
                            Id = 51,
                            Abbreviations = "WY",
                            Name = "Wyoming"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("LMSEntities.Models.AssetPhoto", b =>
                {
                    b.HasBaseType("LMSEntities.Models.Photo");

                    b.Property<int>("LibraryAssetId")
                        .HasColumnType("int");

                    b.HasIndex("LibraryAssetId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("AssetPhoto");
                });

            modelBuilder.Entity("LMSEntities.Models.LibraryCardPhoto", b =>
                {
                    b.HasBaseType("LMSEntities.Models.Photo");

                    b.Property<int>("LibraryCardId")
                        .HasColumnType("int");

                    b.HasIndex("LibraryCardId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("LibraryCardPhoto");
                });

            modelBuilder.Entity("LMSEntities.Models.UserProfilePhoto", b =>
                {
                    b.HasBaseType("LMSEntities.Models.Photo");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("UserProfilePhoto");
                });

            modelBuilder.Entity("LMSEntities.Models.Address", b =>
                {
                    b.HasOne("LMSEntities.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("LMSEntities.Models.AppUserRole", b =>
                {
                    b.HasOne("LMSEntities.Models.AppRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMSEntities.Models.AppUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LMSEntities.Models.Checkout", b =>
                {
                    b.HasOne("LMSEntities.Models.LibraryAsset", "LibraryAsset")
                        .WithMany()
                        .HasForeignKey("LibraryAssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMSEntities.Models.LibraryCard", "LibraryCard")
                        .WithMany("Checkouts")
                        .HasForeignKey("LibraryCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LibraryAsset");

                    b.Navigation("LibraryCard");
                });

            modelBuilder.Entity("LMSEntities.Models.CheckoutHistory", b =>
                {
                    b.HasOne("LMSEntities.Models.LibraryAsset", "LibraryAsset")
                        .WithMany()
                        .HasForeignKey("LibraryAssetId");

                    b.HasOne("LMSEntities.Models.LibraryCard", "LibraryCard")
                        .WithMany()
                        .HasForeignKey("LibraryCardId");

                    b.Navigation("LibraryAsset");

                    b.Navigation("LibraryCard");
                });

            modelBuilder.Entity("LMSEntities.Models.Hold", b =>
                {
                    b.HasOne("LMSEntities.Models.LibraryAsset", "LibraryAsset")
                        .WithMany()
                        .HasForeignKey("LibraryAssetId");

                    b.HasOne("LMSEntities.Models.LibraryCard", "LibraryCard")
                        .WithMany()
                        .HasForeignKey("LibraryCardId");

                    b.Navigation("LibraryAsset");

                    b.Navigation("LibraryCard");
                });

            modelBuilder.Entity("LMSEntities.Models.LibraryAssetAuthor", b =>
                {
                    b.HasOne("LMSEntities.Models.Author", "Author")
                        .WithMany("AuthorAssets")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMSEntities.Models.LibraryAsset", "LibraryAsset")
                        .WithMany("AssetAuthors")
                        .HasForeignKey("LibrayAssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("LibraryAsset");
                });

            modelBuilder.Entity("LMSEntities.Models.LibraryAssetCategory", b =>
                {
                    b.HasOne("LMSEntities.Models.Category", "Category")
                        .WithMany("CategoryAssets")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMSEntities.Models.LibraryAsset", "LibraryAsset")
                        .WithMany("AssetCategories")
                        .HasForeignKey("LibrayAssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("LibraryAsset");
                });

            modelBuilder.Entity("LMSEntities.Models.LibraryCard", b =>
                {
                    b.HasOne("LMSEntities.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMSEntities.Models.AppUser", "Member")
                        .WithOne("LibraryCard")
                        .HasForeignKey("LMSEntities.Models.LibraryCard", "MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("LMSEntities.Models.RefreshToken", b =>
                {
                    b.HasOne("LMSEntities.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LMSEntities.Models.ReserveAsset", b =>
                {
                    b.HasOne("LMSEntities.Models.LibraryAsset", "LibraryAsset")
                        .WithMany()
                        .HasForeignKey("LibraryAssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMSEntities.Models.LibraryCard", "LibraryCard")
                        .WithMany("ReservedAssets")
                        .HasForeignKey("LibraryCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LibraryAsset");

                    b.Navigation("LibraryCard");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("LMSEntities.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("LMSEntities.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("LMSEntities.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("LMSEntities.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LMSEntities.Models.AssetPhoto", b =>
                {
                    b.HasOne("LMSEntities.Models.LibraryAsset", "LibraryAsset")
                        .WithOne("Photo")
                        .HasForeignKey("LMSEntities.Models.AssetPhoto", "LibraryAssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LibraryAsset");
                });

            modelBuilder.Entity("LMSEntities.Models.LibraryCardPhoto", b =>
                {
                    b.HasOne("LMSEntities.Models.LibraryCard", "LibraryCard")
                        .WithOne("LibraryCardPhoto")
                        .HasForeignKey("LMSEntities.Models.LibraryCardPhoto", "LibraryCardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LibraryCard");
                });

            modelBuilder.Entity("LMSEntities.Models.UserProfilePhoto", b =>
                {
                    b.HasOne("LMSEntities.Models.AppUser", "User")
                        .WithOne("ProfilePicture")
                        .HasForeignKey("LMSEntities.Models.UserProfilePhoto", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LMSEntities.Models.AppRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("LMSEntities.Models.AppUser", b =>
                {
                    b.Navigation("LibraryCard");

                    b.Navigation("ProfilePicture");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("LMSEntities.Models.Author", b =>
                {
                    b.Navigation("AuthorAssets");
                });

            modelBuilder.Entity("LMSEntities.Models.Category", b =>
                {
                    b.Navigation("CategoryAssets");
                });

            modelBuilder.Entity("LMSEntities.Models.LibraryAsset", b =>
                {
                    b.Navigation("AssetAuthors");

                    b.Navigation("AssetCategories");

                    b.Navigation("Photo");
                });

            modelBuilder.Entity("LMSEntities.Models.LibraryCard", b =>
                {
                    b.Navigation("Checkouts");

                    b.Navigation("LibraryCardPhoto");

                    b.Navigation("ReservedAssets");
                });
#pragma warning restore 612, 618
        }
    }
}
